'''
Bees.py

Dataset generated by 
'''

import numpy as np
from bnpy.data import SeqXData, MinibatchIterator
import readline

import scipy.io



def get_minibatch_iterator(seed=8675309, dataorderseed=0, nBatch=3, nObsBatch=2, nObsTotal=25000, nLap=1, startLap=0, **kwargs):
    print 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOO'


def get_XZ():
    fpBase = '/data/people/sudderth/kalmanHDPHMM/bees/data'
    name2state = {'turn_right\n':0, 'turn_left\n':1, 'waggle\n':2}
    X = None
    Z = []
    seqInds = [0]

    for seq in xrange(1,7):
        xdata = open('%s/sequence%d/btf/ximage.btf'%(fpBase, seq))
        ydata = open('%s/sequence%d/btf/yimage.btf'%(fpBase, seq))
        tdata = open('%s/sequence%d/btf/timage.btf'%(fpBase, seq))
        labels = open('%s/sequence%d/btf/label0.btf'%(fpBase, seq))

        seqX = list()
        seqZ = list()

        for xpoint in xdata:
            seqX.append([float(xpoint), float(ydata.readline()), \
                         float(tdata.readline())])
            seqZ.append(name2state[labels.readline()])
        print seq
        seqInds = np.append(seqInds, seqInds[seq-1] + len(seqZ))


        print seqInds
        if X is None:
            X = seqX
        else:
            X = np.vstack((X, seqX))
        Z = np.append(Z, seqZ)
    return X, Z, seqInds
    
def get_data_info():
    return 'Six sequences of data from bees dancing'

def get_short_name():
    return 'Bees'

def get_data(**kwargs):
    X, Z, seqInds = get_XZ()
    Data = SeqXData(X = X, seqInds = seqInds, TrueZ = Z)
    Data.summary = get_data_info()
    return Data
    

