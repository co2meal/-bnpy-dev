'''
MoCap.py

Dataset generated by motion capture of humans performing various exercises
There are 12 exercises, and (x,y) coordinates of 6 different joints are observed
  at each timestep.
'''

import numpy as np
import readline
import os
import scipy.io

from bnpy.data import SeqXData, MinibatchIterator

DPATH_OPTIONS = ['/home/mhughes/git/NPBayesHMM/data/mocap6_data/',
                 '/home/will/bnpy/bnpy-dev/datasets/mocap6_data/', 
                 '/home/wtstephe/summer2014/bnpy-dev/datasets/mocap6_data/',
                 '$BNPYDATADIR/mocap6_data/']
DATAPATH = None
for dpath in DPATH_OPTIONS:
  if os.path.exists(dpath):
    DATAPATH = dpath

if DATAPATH is None:
  raise ValueError("Cannot find mocap6_data directory")

def get_minibatch_iterator(seed=8675309, dataorderseed=0, nBatch=3, nObsBatch=2, nObsTotal=25000, nLap=1, startLap=0, **kwargs):
  '''
    Args
    --------
    seed : integer seed for random number generator,
            used for actually *generating* the data
    dataorderseed : integer seed that determines
                     (a) how data is divided into minibatches
                     (b) order these minibatches are traversed

   Returns
    -------
      bnpy MinibatchIterator object, with nObsTotal observations
        divided into nBatch batches
  '''
  X, fullZ, seqInds = get_XZ()
  Data = SeqXData(X = X, TrueZ = fullZ, seqInds = seqInds)
  Data.summary = get_data_info()
  DataIterator = MinibatchIterator(Data, nBatch=nBatch, nObsBatch=nObsBatch, \
                                       nLap=nLap, startLap=startLap, \
                                       dataorderseed=dataorderseed)
  return DataIterator
    
def get_XZ():
  '''
  Returns
  --------
    X, Xprev, fullZ, seqInds : X is the raw data matrix.  Xprev is the matrix
    where Xprev[t,:] = X[t-1,:] (used for autoregressive likelihoods).  fullZ
    is a list of length N containing the true Z value for each observation.
    seqInds contains the indicies into 
  '''
  X = list()
  Z = list()
  zTrue = open(os.path.join(DATAPATH, 'zTrue.dat'), 'r')
  seqs = open(os.path.join(DATAPATH, 'SeqNames.txt'), 'r')
    
  for line in seqs:
    line = line[:-1] #eat the \n at the end of each line
    file = open(DATAPATH + line + '.dat', 'r')
    seqX = list()
      
    seqZ = zTrue.readline()
    seqZ = seqZ.split(' ') 
    seqZ = seqZ[:-1] 
    seqZ = [int(i) for i in seqZ]
    Z.append(seqZ)

    #Read off all the observed joint positions
    for dataPoint in file:
      dataPoint = dataPoint.split(' ')
      dataPoint = dataPoint[:-1]
      dataPoint = [float(i) for i in dataPoint]
      seqX.append(dataPoint)

    X.append(seqX)
        
    seqInds = np.array([0])
    fullZ = []
    for i in xrange(len(Z)):
      seqInds = np.append(seqInds, len(Z[i]) + seqInds[i])
      fullZ = np.append(fullZ, Z[i])
  X = np.vstack(X)
  scipy.io.savemat('trueZ.mat', {'trueZ':fullZ})        

  shapeX = np.shape(X)
  Xprev = np.zeros((shapeX[0], shapeX[1]))
  for i in xrange(1,shapeX[0]):
    Xprev[i,:] = X[i-1,:]
  print Xprev[0:5,:]
  print X[0:5,:]
  return X, Xprev, fullZ, seqInds


def get_data_info():
  return 'Six sequences of data from motion capture of humans performing exercises'

def get_short_name():
  return 'MoCap'

def get_data(**kwargs):
  X, Xprev, fullZ, seqInds = get_XZ()
  Data = SeqXData(X = X, seqInds = seqInds, TrueZ = fullZ, Xprev = Xprev)
  Data.summary = get_data_info()
  return Data
            
            
