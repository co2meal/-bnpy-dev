Timer unit: 1 s

File: bnpy/HModel.py
Function: __init__ at line 30
Total time: 0.000209 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    30                                                    @profile
    31                                                    def __init__( self, allocModel, obsModelName, obsPrior=None, **kwargs ):
    32         1           0.000        0.000      1.4      self.allocModel = allocModel
    33         1           0.000        0.000      1.0      self.qType = self.allocModel.qType
    34         1           0.000        0.000      1.4      self.K     = int( self.allocModel.K )
    35         1           0.000        0.000      1.4      if type( obsModelName ) == str:
    36         1           0.000        0.000      0.5        if obsModelName == 'ZMGauss':
    37         1           0.000        0.000     92.3          self.obsModel   = ZMGaussObsCompSet( allocModel.K, allocModel.qType, obsPrior)
    38         1           0.000        0.000      1.0        if obsModelName == 'GaussCC':
    39                                                          self.obsModel   = GaussCCObsCompSet( allocModel.K, allocModel.qType, obsPrior)
    40         1           0.000        0.000      1.0        elif obsModelName == 'Gaussian':
    41                                                          self.obsModel   = GaussConjObsCompSet( allocModel.K, allocModel.qType, obsPrior)
    42                                                      else:
    43                                                        self.obsModel = obsModelName


File: bnpy/HModel.py
Function: get_global_suff_stats at line 70
Total time: 35.4161 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    70                                                    @profile
    71                                                    def get_global_suff_stats( self, Data, LP, SS=None,**kwargs):
    72         4           0.000        0.000      0.0      if 'Z' in LP:
    73                                                        LP['resp'] = np.zeros( (Data['nObs'],self.K) )
    74                                                        for ii in xrange( Data['nObs'] ):
    75                                                          if LP['Z'][ii] >= 0:
    76                                                            LP['resp'][ii, LP['Z'][ii]] = 1.0
    77                                                        
    78         4           0.000        0.000      0.0      if SS is None:
    79         4           0.000        0.000      0.0        SS = dict()
    80         4           0.206        0.052      0.6      SS = self.allocModel.get_global_suff_stats( Data, SS, LP, **kwargs )
    81         4          35.210        8.802     99.4      SS = self.obsModel.get_global_suff_stats( Data, SS, LP, **kwargs )
    82         4           0.000        0.000      0.0      return SS


File: bnpy/HModel.py
Function: update_global_params at line 105
Total time: 0.019778 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   105                                                    @profile
   106                                                    def update_global_params( self, SS, rho=None, **kwargs):
   107         3           0.001        0.000      3.5      self.allocModel.update_global_params(SS, rho, **kwargs)
   108         3           0.019        0.006     96.5      self.obsModel.update_global_params( SS, rho, **kwargs)


File: bnpy/HModel.py
Function: calc_evidence at line 113
Total time: 1.63534 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   113                                                    @profile
   114                                                    def calc_evidence( self, Data, SS=None, LP=None):
   115         3           0.000        0.000      0.0      if LP is None and SS is None:
   116                                                        LP = self.calc_local_params( Data )
   117                                                        SS = self.get_global_suff_stats( Data, LP)
   118         3           1.449        0.483     88.6      evA = self.allocModel.calc_evidence( Data, SS, LP)
   119         3           0.186        0.062     11.4      evObs = self.obsModel.calc_evidence( Data, SS, LP)
   120         3           0.000        0.000      0.0      return evA + evObs


File: bnpy/HModel.py
Function: calc_local_params at line 126
Total time: 45.7393 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   126                                                    @profile
   127                                                    def calc_local_params( self, Data, LP=None, **kwargs):
   128         3           0.000        0.000      0.0      if LP is None:
   129         1           0.000        0.000      0.0        LP = dict()
   130         3          43.796       14.599     95.8      LP = self.obsModel.calc_local_params( Data, LP, **kwargs ) #collect log soft evidence
   131         3           1.943        0.648      4.2      LP = self.allocModel.calc_local_params( Data, LP, **kwargs )
   132         3           0.000        0.000      0.0      return LP


File: bnpy/allocmodel/AllocModel.py
Function: update_global_params at line 82
Total time: 0.000641 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    82                                                    @profile
    83                                                    def update_global_params( self, SS, rho=None, Krange=None, **kwargs ):
    84                                                      '''
    85                                                      '''
    86         3           0.000        0.000      1.2      if self.qType == 'EM':
    87                                                        self.update_global_params_EM( SS, Krange )
    88         3           0.000        0.000      0.9      elif self.qType == 'VB' or self.qType=='VBsm' or self.qType=='iVB':
    89         3           0.001        0.000     97.8        self.update_global_params_VB( SS, Krange )
    90                                                      elif self.qType.count('oVB') > 0:
    91                                                        if rho is None or rho==1:
    92                                                          self.update_global_params_VB( SS, Krange )
    93                                                        else: 
    94                                                          self.update_global_params_onlineVB( SS, rho, Krange )
    95                                                      elif self.qType == 'CGS':
    96                                                        self.update_global_params_CGS( SS, Krange )
    97                                                      else:
    98                                                        raise ValueError( 'Unrecognized qType! %s' % (self.qType) )


File: bnpy/allocmodel/mix/DPMixModel.py
Function: __init__ at line 15
Total time: 3.3e-05 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    15                                                    @profile
    16                                                    def __init__(self, K=3, alpha0=5.0, truncType='z', qType='VB', Kmax=None, **kwargs):
    17         1           0.000        0.000      9.1      if qType.count('EM')>0:
    18                                                        raise ValueError('DPMixModel cannot do EM. Only VB learning possible.')
    19         1           0.000        0.000      6.1      self.qType = qType
    20         1           0.000        0.000      6.1      self.K = K
    21         1           0.000        0.000      6.1      self.alpha1 = 1.0
    22         1           0.000        0.000      6.1      self.alpha0 = alpha0    
    23         1           0.000        0.000      9.1      self.truncType = truncType
    24                                                      
    25                                                      # q( v_k ) = Beta( qalpha1[k], qalpha0[k] )
    26         1           0.000        0.000     33.3      self.qalpha1 = np.zeros( K )
    27         1           0.000        0.000     15.2      self.qalpha0 = np.zeros( K )
    28         1           0.000        0.000      9.1      if qType.count('GS') > 0 and Kmax is not None:
    29                                                        self.Kmax = Kmax


File: bnpy/allocmodel/mix/DPMixModel.py
Function: set_helper_params at line 56
Total time: 0.000192 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    56                                                    @profile
    57                                                    def set_helper_params( self ):
    58         3           0.000        0.000     29.2      DENOM = digamma( self.qalpha0 + self.qalpha1 )
    59         3           0.000        0.000     21.9      self.ElogV      = digamma( self.qalpha1 ) - DENOM
    60         3           0.000        0.000     20.8      self.Elog1mV    = digamma( self.qalpha0 ) - DENOM
    61                                                  
    62         3           0.000        0.000      4.2      if self.truncType == 'v':
    63                                                        self.qalpha1[-1] = 1
    64                                                        self.qalpha0[-1] = EPS #avoid digamma(0), which is way too HUGE
    65                                                        self.ElogV[-1] = 0  # log(1) => 0
    66                                                        self.Elog1mV[-1] = np.log(1e-40) # log(0) => -INF, never used
    67                                                  		
    68                                                  		# Calculate expected mixture weights E[ log w_k ]	 
    69         3           0.000        0.000      7.8      self.Elogw = self.ElogV.copy() #copy so we can do += without modifying ElogV
    70         3           0.000        0.000     16.1      self.Elogw[1:] += self.Elog1mV[:-1].cumsum()


File: bnpy/allocmodel/mix/DPMixModel.py
Function: get_global_suff_stats at line 84
Total time: 0.205965 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    84                                                    @profile
    85                                                    def get_global_suff_stats( self, Data, SS, LP, Krange=None, Ntotal=None, Eflag=None ):
    86                                                      ''' Just leave Krange alone for now.
    87                                                      '''
    88         4           0.206        0.051     99.9      SS['N'] = np.sum( LP['resp'], axis=0 )
    89                                                     
    90         4           0.000        0.000      0.0      if Ntotal is not None:
    91                                                        ampF = Ntotal/SS['N'].sum()
    92                                                        SS['N'] = ampF*SS['N']
    93                                                        SS['ampF'] = ampF
    94                                                  
    95         4           0.000        0.000      0.0      if Eflag is not None:
    96                                                        SS['Hz'] = np.sum( LP['resp'] * np.log(EPS+LP['resp']), axis=0 )
    97                                                  
    98         4           0.000        0.000      0.0      SS['Ntotal'] = SS['N'].sum()
    99         4           0.000        0.000      0.0      return SS


File: bnpy/allocmodel/mix/DPMixModel.py
Function: calc_local_params at line 129
Total time: 1.93798 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   129                                                    @profile
   130                                                    def calc_local_params( self, Data, LP, Krange=None ):
   131                                                      ''' 
   132                                                      '''
   133         3           0.167        0.056      8.6      lpr = self.Elogw + LP['E_log_soft_ev']
   134         3           0.013        0.004      0.7      del LP['E_log_soft_ev']
   135         3           0.000        0.000      0.0      if Krange is None:
   136         3           0.919        0.306     47.4        lprPerItem = logsumexp( lpr, axis=1 )
   137         3           0.835        0.278     43.1        resp   = np.exp( lpr-lprPerItem[:,np.newaxis] ) 
   138                                                      else:
   139                                                        lprPerItem = logsumexp( lpr[:,Krange], axis=1 )
   140                                                        resp   = np.zeros( lpr.shape )
   141                                                        resp[:,Krange]   = np.exp( lpr[:,Krange]-lprPerItem[:,np.newaxis] ) 
   142                                                    
   143         3           0.003        0.001      0.2      LP['resp'] = resp
   144         3           0.000        0.000      0.0      return LP


File: bnpy/allocmodel/mix/DPMixModel.py
Function: calc_evidence at line 149
Total time: 1.44878 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   149                                                    @profile
   150                                                    def calc_evidence( self, Data, SS, LP=None ):
   151         3           0.000        0.000      0.0      if self.qType == 'CGS':
   152                                                        self.qalpha1 = self.alpha1 + SS['N']
   153                                                        self.qalpha0 = self.alpha0*np.ones( self.K )
   154                                                        self.qalpha0[:-1] += SS['N'][::-1].cumsum()[::-1][1:]
   155                                                        return self.calc_log_marg_lik( SS, LP )
   156         3           0.000        0.000      0.0      evV = self.E_logpV() - self.E_logqV()
   157         3           0.000        0.000      0.0      if 'Hz' in SS:
   158                                                        evZq = self.E_logqZfast( SS)
   159                                                      else:
   160         3           1.448        0.483    100.0        evZq = self.E_logqZ( LP )
   161         3           0.000        0.000      0.0      if 'ampF' in SS:
   162                                                        evZ = self.E_logpZ( SS ) -  SS['ampF']*evZq
   163                                                      else:
   164         3           0.000        0.000      0.0        evZ = self.E_logpZ( SS ) - evZq
   165         3           0.000        0.000      0.0      return evZ + evV


File: bnpy/allocmodel/mix/DPMixModel.py
Function: update_global_params_VB at line 250
Total time: 0.000532 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   250                                                    @profile
   251                                                    def update_global_params_VB( self, SS,  Krange=None,  **kwargs ):
   252                                                      '''  Updates internal stick breaking weights given suff. stats
   253                                                           Can optionally only update a given set of indices "Krange",
   254                                                             though because of the dependent ordering of the sticks,
   255                                                             it is not correct to just pick out indices at random.  
   256                                                           Instead, we must update all indices from the lowest entry in Krange on up
   257                                                      '''
   258         3           0.000        0.000      2.1      assert self.K == SS['N'].size
   259         3           0.000        0.000      9.8      qalpha1 = self.alpha1 + SS['N']
   260         3           0.000        0.000     15.8      qalpha0 = self.alpha0*np.ones( self.K )
   261         3           0.000        0.000     16.5      qalpha0[:-1] += SS['N'][::-1].cumsum()[::-1][1:]
   262         3           0.000        0.000      1.1      if Krange is None:
   263         3           0.000        0.000      2.4        self.qalpha1 = qalpha1
   264         3           0.000        0.000      1.9        self.qalpha0 = qalpha0
   265                                                      else:
   266                                                        self.qalpha1 = qalpha1
   267                                                        self.qalpha0 = qalpha0
   268                                                        '''
   269                                                        kmin = np.min(Krange)-1
   270                                                        if kmin == -1:
   271                                                          self.qalpha1 = qalpha1
   272                                                          self.qalpha0 = qalpha0
   273                                                        else:
   274                                                          Kextra = np.max(Krange)+1-self.qalpha1.size
   275                                                          if Kextra > 0:
   276                                                            arrExtra = np.zeros( Kextra)
   277                                                            self.qalpha1 = np.append( self.qalpha1, arrExtra )
   278                                                            self.qalpha0 = np.append( self.qalpha0, arrExtra )
   279                                                          self.qalpha1[ kmin: ] = qalpha1[ kmin: ]
   280                                                          self.qalpha0[ kmin: ] = qalpha0[ kmin: ]
   281                                                        '''
   282         3           0.000        0.000     50.4      self.set_helper_params()


File: bnpy/init/GaussObsSetInitializer.py
Function: __init__ at line 21
Total time: 1.4e-05 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    21                                                    @profile
    22                                                    def __init__( self, initname, seed):
    23         1           0.000        0.000     14.3      self.initname = initname
    24         1           0.000        0.000     14.3      self.seed = seed
    25         1           0.000        0.000     42.9      np.random.seed( self.seed )
    26         1           0.000        0.000     28.6      scipy.random.seed( self.seed )


File: bnpy/learn/LearnAlg.py
Function: __init__ at line 21
Total time: 3.3e-05 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    21                                                    @profile
    22                                                    def __init__( self, savefilename=os.environ['BNPYOUTDIR'], nIter=100, \
    23                                                                      initname='randsample',  convTHR=1e-10, \
    24                                                                      printEvery=5, saveEvery=5, traceEvery=1, \
    25                                                                      doVerify=False, \
    26                                                                      rhodelay=1, rhoexp=0.6, \
    27                                                                      **kwargs ):
    28         1           0.000        0.000     12.1      self.savefilename = savefilename
    29         1           0.000        0.000      6.1      self.initname = initname
    30         1           0.000        0.000      6.1      self.convTHR = convTHR
    31         1           0.000        0.000      9.1      self.Niter = nIter
    32         1           0.000        0.000      6.1      self.printEvery = printEvery
    33         1           0.000        0.000      9.1      self.saveEvery = saveEvery
    34         1           0.000        0.000      6.1      self.traceEvery = traceEvery
    35         1           0.000        0.000      9.1      self.TraceIters = dict()
    36         1           0.000        0.000      6.1      self.SavedIters = dict()
    37         1           0.000        0.000      9.1      self.doVerify = doVerify
    38         1           0.000        0.000      9.1      self.rhodelay =rhodelay
    39         1           0.000        0.000      6.1      self.rhoexp   = rhoexp
    40         1           0.000        0.000      6.1      self.saveext = 'mat'


File: bnpy/learn/VBLearnAlg.py
Function: __init__ at line 13
Total time: 9.4e-05 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    13                                                    @profile
    14                                                    def __init__( self, **kwargs ):
    15         1           0.000        0.000    100.0      super(type(self), self).__init__( **kwargs )


File: bnpy/learn/VBLearnAlg.py
Function: fit at line 17
Total time: 74.3048 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    17                                                    @profile
    18                                                    def fit( self, hmodel, Data ):
    19                                                      '''
    20                                                          Notes
    21                                                          -------
    22                                                          *order* of Mstep, Estep, and ev calculation is very important
    23                                                      '''
    24         1           0.000        0.000      0.0      self.start_time = time.time()
    25         1           0.000        0.000      0.0      status = "max iters reached."
    26         1           0.000        0.000      0.0      prevBound = -np.inf
    27         1           0.000        0.000      0.0      evBound = -1
    28         1           0.000        0.000      0.0      LP = None
    29         4           0.000        0.000      0.0      for iterid in xrange(self.Niter):
    30         3           0.000        0.000      0.0        if iterid > 0:
    31                                                          # M-step
    32         2           0.009        0.005      0.0          hmodel.update_global_params( SS ) 
    33                                                        
    34                                                        # E-step 
    35         3          45.739       15.246     61.6        LP = hmodel.calc_local_params( Data, LP )
    36         3          26.616        8.872     35.8        SS = hmodel.get_global_suff_stats( Data, LP )
    37                                                  
    38         3           1.635        0.545      2.2        evBound = hmodel.calc_evidence( Data, SS, LP )
    39                                                        
    40                                                        # Save and display progress
    41         3           0.092        0.031      0.1        self.save_state(hmodel, iterid+1, evBound, Data['nObs'])
    42         3           0.000        0.000      0.0        self.print_state(hmodel, iterid+1, evBound)
    43                                                  
    44                                                        # Check for Convergence!
    45                                                        #  throw error if our bound calculation isn't working properly
    46                                                        #    but only if the gap is greater than some tolerance
    47         3           0.000        0.000      0.0        isConverged = self.verify_evidence( evBound, prevBound )
    48                                                  
    49         3           0.000        0.000      0.0        if isConverged:
    50                                                          status = 'converged.'
    51                                                          break
    52         3           0.000        0.000      0.0        prevBound = evBound
    53                                                  
    54                                                      #Finally, save, print and exit 
    55         1           0.212        0.212      0.3      self.save_state(hmodel,iterid+1, evBound, Data['nObs'], doFinal=True) 
    56         1           0.000        0.000      0.0      self.print_state(hmodel,iterid+1, evBound, doFinal=True, status=status)
    57         1           0.000        0.000      0.0      return LP


File: bnpy/obsmodel/ObsCompSet.py
Function: update_global_params at line 85
Total time: 0.018993 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    85                                                    @profile
    86                                                    def update_global_params( self, SS, rho=None, Krange=None):
    87                                                      ''' M-step update
    88                                                      '''
    89         3           0.000        0.000      0.0      if Krange is None:
    90         3           0.000        0.000      0.0          Krange = xrange(self.K)
    91         3           0.000        0.000      0.0      if self.qType == 'CGS':
    92                                                        self.update_obs_params_CGS(SS, Krange)
    93         3           0.000        0.000      0.0      elif self.qType == 'EM':
    94                                                        self.update_obs_params_EM( SS, Krange )
    95         3           0.000        0.000      0.1      elif self.qType.count('VB')>0:
    96         3           0.000        0.000      0.0        if rho is None or rho == 1.0:
    97         3           0.019        0.006     99.8          self.update_obs_params_VB( SS, Krange )
    98                                                        else:
    99                                                          self.update_obs_params_VB_stochastic( SS, rho, Krange )


File: bnpy/obsmodel/ObsCompSet.py
Function: calc_local_params at line 112
Total time: 43.7963 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   112                                                    @profile
   113                                                    def calc_local_params( self, Data, LP):
   114         3           0.000        0.000      0.0      if self.qType == 'EM':
   115                                                        LP['E_log_soft_ev'] = self.log_soft_ev_mat( Data )
   116         3           0.000        0.000      0.0      elif self.qType.count('VB') >0:
   117         3          43.796       14.599    100.0        LP['E_log_soft_ev'] = self.E_log_soft_ev_mat( Data )
   118         3           0.000        0.000      0.0      return LP


File: bnpy/obsmodel/ZMGaussObsCompSet.py
Function: __init__ at line 18
Total time: 9.1e-05 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    18                                                    @profile
    19                                                    def __init__( self, K=3, qType='EM', obsPrior=None, min_covar=1e-8):
    20         1           0.000        0.000      3.3      self.K = K
    21         1           0.000        0.000      2.2      self.qType = qType
    22         1           0.000        0.000      2.2      self.obsPrior = obsPrior
    23         1           0.000        0.000      2.2      if self.obsPrior is not None:
    24         1           0.000        0.000      2.2        self.obsPrior.qType = qType
    25         1           0.000        0.000      1.1      if self.qType == 'EM':
    26                                                        self.min_covar = min_covar
    27        51           0.000        0.000     84.6      self.comp = [None for k in xrange(K)]
    28         1           0.000        0.000      2.2      self.D = None


File: bnpy/obsmodel/ZMGaussObsCompSet.py
Function: get_global_suff_stats at line 84
Total time: 35.2013 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    84                                                    @profile
    85                                                    def get_global_suff_stats(self, Data, SS, LP, Krange=None, Ntotal=None, **kwargs):
    86         4           0.000        0.000      0.0      if Krange is None:  Krange = xrange( self.K)
    87         4           0.000        0.000      0.0      X = Data['X']
    88         4           0.325        0.081      0.9      sqrtResp = np.sqrt( LP['resp'] )
    89         4           0.004        0.001      0.0      SSxxT = np.zeros( (self.K, self.D, self.D) )
    90       204           0.002        0.000      0.0      for k in Krange:
    91       200          34.871        0.174     99.1        SSxxT[k] = dotATA(sqrtResp[:,k][:,np.newaxis]*X )
    92                                                  
    93         4           0.000        0.000      0.0      if Ntotal is None:
    94         4           0.000        0.000      0.0        SS['xxT'] = SSxxT
    95                                                      else:
    96                                                        SS['xxT'] = SS['ampF']*SSxxT
    97         4           0.000        0.000      0.0      return SS


File: bnpy/obsmodel/ZMGaussObsCompSet.py
Function: update_obs_params_VB at line 138
Total time: 0.018482 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   138                                                    @profile
   139                                                    def update_obs_params_VB( self, SS,  Krange, **kwargs):
   140       153           0.000        0.000      1.2      for k in Krange:
   141       150           0.018        0.000     98.8        self.comp[k] = self.obsPrior.get_post_distr(SS['N'][k],ExxT=SS['xxT'][k])


File: bnpy/obsmodel/ZMGaussObsCompSet.py
Function: calc_evidence at line 161
Total time: 0.186329 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   161                                                    @profile
   162                                                    def calc_evidence( self, Data, SS, LP=None):
   163         3           0.000        0.000      0.0      if self.qType == 'EM': 
   164                                                        return 0 # handled by alloc model
   165         3           0.000        0.000      0.0      elif self.qType == 'CGS':
   166                                                        return self.calc_log_marg_lik( Data, SS)
   167                                                      else:
   168         3           0.186        0.062    100.0        return self.E_logpX(SS) + self.E_logpPhi() - self.E_logqPhi()    


File: bnpy/obsmodel/ZMGaussObsCompSet.py
Function: E_logpX at line 170
Total time: 0.094975 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   170                                                    @profile
   171                                                    def E_logpX( self, SS ):
   172                                                      ''' E_{q(Z), q(Phi)} [ log p(X) ]
   173                                                      '''     
   174         3           0.000        0.000      0.0      lpX = np.zeros( self.K )
   175       153           0.000        0.000      0.4      for k in range(self.K):
   176       150           0.001        0.000      0.7        if SS['N'][k] == 0:
   177                                                          continue
   178       150           0.094        0.001     98.8        lpX[k] = SS['N'][k]*self.comp[k].ElogdetLam() - self.comp[k].E_traceLam( SS['xxT'][k] )
   179         3           0.000        0.000      0.1      return 0.5*np.sum( lpX )


File: bnpy/obsmodel/distr/WishartDistr.py
Function: __init__ at line 15
Total time: 0.001864 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    15                                                    @profile
    16                                                    def __init__( self, v=None, invW=None):
    17       151           0.000        0.000     11.7      if v is None:
    18         1           0.000        0.000      0.2        self.v = None
    19         1           0.000        0.000      0.1        self.invW = None
    20                                                      else:
    21       150           0.000        0.000     17.5        self.v = float(v)
    22       150           0.001        0.000     38.2        self.invW = np.asarray(invW)
    23       150           0.000        0.000     16.9        self.D = self.invW.shape[0]
    24       151           0.000        0.000     15.4      self.Cache = dict()


File: bnpy/obsmodel/distr/WishartDistr.py
Function: get_post_distr at line 76
Total time: 0.009231 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    76                                                    @profile
    77                                                    def get_post_distr( self, EN, Ex=None, ExxT=None, Emu=None, Ecov=None):
    78                                                      ''' Create new Distr object with posterior params
    79                                                      '''
    80       150           0.001        0.000     12.4      v    = self.v + EN
    81       150           0.001        0.000      5.7      if EN == 0:
    82                                                        invW = self.invW
    83       150           0.000        0.000      3.1      elif Ex is None:              # For Zero-Mean Gaussian
    84       150           0.003        0.000     30.5        invW = self.invW + ExxT
    85                                                      else:                       # For Independent Prior Gaussian
    86                                                        xmT  = np.outer(Ex, Emu)
    87                                                        invW = self.invW + ExxT -xmT - xmT.T + EN*np.outer(Emu,Emu) + EN*Ecov
    88       150           0.004        0.000     48.3      return WishartDistr( v=v, invW=invW)


File: bnpy/obsmodel/distr/WishartDistr.py
Function: E_log_pdf at line 149
Total time: 43.3767 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   149                                                    @profile
   150                                                    def E_log_pdf( self, Data ):
   151                                                      ''' Returns E[ log p( x | theta ) ] under q(theta) <- this distr
   152                                                      '''
   153       150           0.096        0.001      0.2      logp = 0.5*self.ElogdetLam() \
   154       150          43.280        0.289     99.8            -0.5*self.E_dist_mahalanobis( Data['X'] )
   155       150           0.001        0.000      0.0      return logp


