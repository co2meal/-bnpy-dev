Timer unit: 1 s

File: bnpy/HModel.py
Function: calc_local_params at line 68
Total time: 3.96922 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    68                                                    @profile
    69                                                    def calc_local_params( self, Data, LP=None, **kwargs):
    70                                                      ''' Calculate the local parameters for each data item given global parameters.
    71                                                          This is the E-step of the EM/VB algorithm.        
    72                                                      '''
    73       101           0.000        0.000      0.0      if LP is None:
    74         1           0.000        0.000      0.0        LP = dict()
    75                                                      # Calculate the "soft evidence" each obsModel component has on each item
    76                                                      # Fills in LP['E_log_soft_ev']
    77       101           2.249        0.022     56.7      LP = self.obsModel.calc_local_params(Data, LP, **kwargs)
    78                                                      # Combine with allocModel probs of each cluster
    79                                                      # Fills in LP['resp'], a Data.nObs x K matrix whose rows sum to one
    80       101           1.720        0.017     43.3      LP = self.allocModel.calc_local_params(Data, LP, **kwargs)
    81       101           0.000        0.000      0.0      return LP


File: bnpy/HModel.py
Function: get_global_suff_stats at line 86
Total time: 1.09965 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    86                                                    @profile
    87                                                    def get_global_suff_stats( self, Data, LP, Ntotal=None, **kwargs):
    88                                                      ''' Calculate sufficient statistics for global parameters, given data and local responsibilities
    89                                                          This is necessary prep for the M-step of EM/VB.
    90                                                      '''
    91       102           0.061        0.001      5.6      SS = self.allocModel.get_global_suff_stats( Data, LP, **kwargs )
    92       102           1.038        0.010     94.4      SS = self.obsModel.get_global_suff_stats( Data, SS, LP, **kwargs )
    93                                                      # Change effective scale (nObs) of the suff stats 
    94                                                      # (useful for stochastic variational)
    95       102           0.000        0.000      0.0      if Ntotal is not None:
    96                                                        ampF = Ntotal / Data.nObs
    97                                                        SS.applyAmpFactor(ampF)
    98       102           0.000        0.000      0.0      return SS


File: bnpy/HModel.py
Function: update_global_params at line 103
Total time: 0.210831 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   103                                                    @profile
   104                                                    def update_global_params( self, SS, rho=None, **kwargs):
   105                                                      ''' Update (in-place) global parameters given provided sufficient statistics.
   106                                                          This is the M-step of EM/VB.
   107                                                      '''
   108       101           0.011        0.000      5.0      self.allocModel.update_global_params(SS, rho, **kwargs)
   109       101           0.200        0.002     95.0      self.obsModel.update_global_params( SS, rho, **kwargs)


File: bnpy/HModel.py
Function: calc_evidence at line 114
Total time: 0.011493 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   114                                                    @profile
   115                                                    def calc_evidence( self, Data=None, SS=None, LP=None):
   116                                                      ''' Compute the evidence lower bound (ELBO) of the objective function.
   117                                                      '''
   118       101           0.000        0.000      1.3      if Data is not None and LP is None and SS is None:
   119                                                        LP = self.calc_local_params( Data )
   120                                                        SS = self.get_global_suff_stats( Data, LP)
   121       101           0.009        0.000     81.8      evA = self.allocModel.calc_evidence( Data, SS, LP)
   122       101           0.001        0.000     11.9      evObs = self.obsModel.calc_evidence( Data, SS, LP)
   123       101           0.001        0.000      5.0      return evA + evObs


File: bnpy/allocmodel/AllocModel.py
Function: update_global_params at line 59
Total time: 0.008924 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    59                                                    @profile
    60                                                    def update_global_params( self, SS, rho=None, **kwargs ):
    61                                                      ''' Update (in-place) global parameters for this allocation model object,
    62                                                          given the provided suff stats object SS
    63                                                          This is the M-step of EM/VB algorithm
    64                                                      '''
    65       101           0.000        0.000      2.6      self.K = SS.K
    66       101           0.000        0.000      2.0      if self.inferType == 'EM':
    67       101           0.008        0.000     92.8        self.update_global_params_EM( SS )
    68                                                      elif self.inferType == 'VB' or self.inferType == "moVB":
    69                                                        self.update_global_params_VB( SS )
    70                                                      elif self.inferType == 'soVB':
    71                                                        if rho is None or rho==1:
    72                                                          self.update_global_params_VB( SS)
    73                                                        else: 
    74                                                          self.update_global_params_soVB( SS, rho)
    75                                                      else:
    76                                                        raise ValueError( 'Unrecognized Inference Type! %s' % (self.inferType) )
    77       101           0.000        0.000      2.7      self.isReady = True


File: bnpy/distr/GaussDistr.py
Function: log_pdf at line 87
Total time: 2.02767 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    87                                                    @profile
    88                                                    def log_pdf(self, Data):
    89                                                      ''' Calculate log soft evidence for all data items under this distrib
    90                                                          
    91                                                          Returns
    92                                                          -------
    93                                                          logp : Data.nObs x 1 vector, where
    94                                                                  logp[n] = log p( Data[n] | self's mean and prec matrix )
    95                                                      '''
    96      1010           2.028        0.002    100.0      return -1*self.get_log_norm_const() - 0.5*self.dist_mahalanobis(Data.X)


File: bnpy/distr/GaussDistr.py
Function: dist_mahalanobis at line 98
Total time: 1.73096 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    98                                                    @profile
    99                                                    def dist_mahalanobis(self, X):
   100                                                      '''  Given NxD matrix X, compute  Nx1 vector Dist
   101                                                              Dist[n] = ( X[n]-m )' L (X[n]-m)
   102                                                      '''
   103      1010           1.126        0.001     65.0      Q = dotABT( self.cholL(), X-self.m )
   104      1010           0.073        0.000      4.2      Q *= Q
   105      1010           0.532        0.001     30.8      return np.sum( Q, axis=0)


File: bnpy/obsmodel/GaussObsCompSet.py
Function: get_global_suff_stats at line 79
Total time: 0.981508 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
    79                                                    @profile
    80                                                    def get_global_suff_stats( self, Data, SS, LP, **kwargs):
    81                                                      ''' Calculate suff stats for the global parameter update
    82                                                          Args
    83                                                          -------
    84                                                          Data : bnpy XData object
    85                                                          SS : bnpy SuffStatDict object
    86                                                          LP : dict of local params, with field
    87                                                                resp : Data.nObs x K array whose rows sum to one
    88                                                                        resp[n,k] gives posterior prob of comp k for data item n
    89                                                          
    90                                                          Returns
    91                                                          -------
    92                                                          SS : SuffStatDict object, with new fields
    93                                                                x : K x D array of component-specific sums
    94                                                                xxT : K x D x D array of component-specific "sums of outer products"
    95                                                                      analogous to a sum of squares, but for covar matrix
    96                                                      '''
    97       102           0.000        0.000      0.0      X = Data.X
    98       102           0.000        0.000      0.0      resp = LP['resp']
    99       102           0.000        0.000      0.0      K = resp.shape[1]
   100                                                      
   101                                                      # Expected mean for each k
   102       102           0.240        0.002     24.5      SS.x = dotATB(resp, X)
   103                                                      # Expected covar for each k 
   104       102           0.186        0.002     18.9      sqrtResp = np.sqrt(resp)
   105       102           0.001        0.000      0.1      xxT = np.zeros( (K, self.D, self.D) )
   106      1122           0.003        0.000      0.3      for k in xrange(K):
   107      1020           0.548        0.001     55.8        xxT[k] = dotATA(sqrtResp[:,k][:,np.newaxis]*Data.X )
   108       102           0.003        0.000      0.3      SS.xxT = xxT
   109       102           0.000        0.000      0.0      return SS


File: bnpy/obsmodel/GaussObsCompSet.py
Function: update_obs_params_EM at line 113
Total time: 0.188366 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   113                                                    @profile
   114                                                    def update_obs_params_EM( self, SS, Krange, **kwargs):
   115       101           0.002        0.000      1.0      I = np.eye(self.D)
   116      1111           0.002        0.000      1.0      for k in Krange:
   117      1010           0.016        0.000      8.3        mean    = SS['x'][k]/SS['N'][k]
   118      1010           0.039        0.000     20.8        covMat  = SS['xxT'][k]/SS['N'][k] - np.outer(mean,mean)
   119      1010           0.010        0.000      5.5        covMat  += self.min_covar * I      
   120      1010           0.104        0.000     55.2        precMat = np.linalg.solve( covMat, I )
   121      1010           0.015        0.000      8.2        self.comp[k] = GaussDistr(m=mean, L=precMat)


File: bnpy/obsmodel/GaussObsCompSet.py
Function: calc_evidence at line 136
Total time: 0.000252 s

Line #      Hits            Time      Per Hit   % Time  Line Contents
=====================================================================
   136                                                    @profile
   137                                                    def calc_evidence( self, Data, SS, LP):
   138       101           0.000        0.000     59.1      if self.inferType == 'EM':
   139       101           0.000        0.000     40.9       return 0 # handled by alloc model
   140                                                      else:
   141                                                        return self.E_logpX( LP, SS) + self.E_logpPhi() - self.E_logqPhi()


