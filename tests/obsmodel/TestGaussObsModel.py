'''
Unit tests for GaussObsModel
'''
from bnpy.data import XData
from bnpy.obsmodel import GaussObsModel
from bnpy.distr import GaussWishDistr
from bnpy.util.RandUtil import mvnrand
import unittest
import numpy as np

class TestGaussObsModel(unittest.TestCase):
  def shortDescription(self):
    pass
    
  def setUp(self):
    self.MakeModel()
    self.MakeData()
  
  def MakeModel(self):
    self.obsM = None
    
  def MakeData(self, nObsC=200):
    if self.obsM is None:
      return
    XList = list()
    np.random.seed(505)
    for k in range(self.obsM.K):
      Sigma = self.obsM.get_covar_mat_for_comp(k)
      mu = self.obsM.get_mean_for_comp(k)
      Xcur = mvnrand(mu, Sigma, nObsC)
      XList.append(Xcur)
    X = np.vstack(XList)
    self.nObsC = nObsC
    self.Data = XData(X=X)  
      
  def test_dimension(self):
    ''' Verify dimensions match btw model and data
    '''
    if self.obsM is None:
      return
    assert self.obsM.D == self.Data.dim 

  def test_calc_local_params(self):
    ''' Calc soft assign responsibilities for all data items
        Verify that the items generated by each component are (usually) associated with that component.
    '''
    if self.obsM is None:
      return
    LP = self.obsM.calc_local_params(self.Data)
    lpr = LP['E_log_soft_ev']
    maxIDs = np.argmax(lpr, axis=1)
    for k in range(self.obsM.K):
      currange = range(k*self.nObsC, (k+1)*self.nObsC)
      nMatch = np.sum( maxIDs[currange]==k )
      assert nMatch > 0.95 * self.nObsC
    
class TestGaussObsModelVB(TestGaussObsModel):
  def MakeModel(self):
    oDict = dict(inferType='VB')
    compA =  dict(m=[100,100], kappa=1.0e-4, invW=np.eye(2), dF=4)
    compB =  dict(m=[-100,-100], kappa=1.0e-4, invW=np.eye(2), dF=4)
    compC =  dict(m=[0,0], kappa=1.0e-4, invW=np.eye(2), dF=4)
    compDictList = [compA, compB, compC]
    obsPrior = GaussWishDistr(m=[0,0], kappa=1e-4, invW=np.eye(2), dF=4)
    self.obsM = GaussObsModel.CreateWithAllComps(oDict, obsPrior, compDictList)
    
class TestGaussObsModelEM(TestGaussObsModel):
  def MakeModel(self):
    oDict = dict(inferType='EM', min_covar=0.0)
    compDictList = [ dict(m=[100,100], L=np.eye(2)), dict(m=[0,0], L=100*np.eye(2))]
    obsPrior = None
    self.obsM = GaussObsModel.CreateWithAllComps(oDict, obsPrior, compDictList)
